<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- 부트스트랩 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
  <!-- 부트스트랩 번들 (Popper.js 포함) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
</head>
<body>
<header>
    <!-- '../header' 파일의 내용을 포함 -->
    <%- include('../header') %>
</header>
<main>
    <div class="container">
        <!-- 웹캠 영상 표시 -->
        <video id="video" width="640" height="480" autoplay playsinline muted style="position:absolute; top:0; left:0;"></video>
        <!-- 그리기 영역 정의, 비디오 영역에 겹쳐서 그림 -->
        <canvas id="canvas" width="640" height="480" style="position:absolute; top:0; left:0;"></canvas>
    </div>
</main>
</body>
<!-- Tensorflow.js 및 COCO-SSD 모델 로딩 -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd@2.2.2/dist/coco-ssd.min.js"></script>
    
<script>
    const video = document.getElementById('video');
    const canvas = document.getElementById("canvas");
    const context = canvas.getContext("2d");

    let webcam, model;

    async function app() {
        // 웹캠 영상 받아오기
        webcam = await navigator.mediaDevices.getUserMedia({ video: true, audio: false })
        video.srcObject = webcam;
        
        // COCO-SSD 모델 로딩
        model = await cocoSsd.load();
        
        // 루프 시작
        loop();
    }
    async function loop() {
        // 비디오 화면을 캔버스에 그리기
        context.drawImage(video, 0, 0);
        
        // 객체 탐지
        const predictions = await model.detect(canvas);
        console.log('Predictions: ', predictions);

        /* 객체 탐지 결과 드로잉 */
        for (let i=0; i<predictions.length; i++) {
            let [x, y, width, height] = predictions[i].bbox;
            
            // 객체 경계 상자 그리기
            context.beginPath();
            context.lineWidth = 2;
            context.strokeStyle = "#00ff00";
            context.strokeRect(x, y, width, height);   
            
            // 객체 이름과 확률 표시 및 배경 그리기
            context.fillStyle = "#00ff00";
            context.fillRect(x, y-20, width, 20);
            
            context.font = "25px Arial";
            context.fillStyle = "#ffffff";
            context.fillText(`${predictions[i].class} :  ${parseFloat(predictions[i].score).toFixed(2)}`, x, y);
        }
        
        // 다음 프레임 요청
        requestAnimationFrame(loop);
    }
    // 앱 실행
    app();
</script>
</html>
