<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- 부트스트랩 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
  <!-- 부트스트랩 번들 (Popper.js 포함) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script>
  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
</head>
<body>
<header>
    <!-- '../header' 파일의 내용을 포함 -->
    <%- include('../header') %>
</header>
<main>
    <div class="container">  
        <!-- 이미지 입력 필드 -->
        <input type="file" id="input_image" accept="image/*" onchange="loadImage(this)">
        <br>
        <!-- 미리보기 이미지 -->
        <img id="preview" width="640"/>
        <br><br>
        <!-- 분류 버튼 -->
        <button type="button" class="btn btn-primary" id="pred_button" onclick="predict()">예측</button>
        <!-- 예측 결과 표시 -->
        <div id="prediction"></div>
    </div>
</main>
</body>
<!-- Tensorflow.js 및 모델 로딩 -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet@1.0.0"> </script>

<script type="text/javascript">

    let model;

    async function app() {
        // 모델 로드
        model = await mobilenet.load();
    }

    // 이미지 로드 함수
    function loadImage(input) {
        if (input.files && input.files[0]) {
            let reader = new FileReader();
            reader.onload = function(e) {
                // 미리보기 이미지 업데이트
                document.getElementById('preview').src = e.target.result;
            };       
            reader.readAsDataURL(input.files[0]);
        } 
    };

    // 예측 함수
    async function predict() {
        let image = document.getElementById("preview");
        // 이미지 분류 예측
        pred = await model.classify(image);
        const html = `${pred[0].className} : ${pred[0].probability}`;

        // 예측 결과 표시
        document.getElementById('prediction').innerHTML = html;
    }

    // 앱 실행
    app();
    
</script>
</html>
